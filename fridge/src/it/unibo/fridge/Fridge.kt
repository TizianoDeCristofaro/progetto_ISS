/* Generated by AN DISI Unibo */ 
package it.unibo.fridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridge ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("HELLO FRIDGE!")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("FRIDGE WAITING")
					}
					 transition(edgeName="t00",targetState="list",cond=whenEvent("userCmd"))
				}	 
				state("list") { //this:State
					action { //it:State
						println("FRIDGE LISTING")
					}
					 transition( edgeName="goto",targetState="send", cond=doswitch() )
				}	 
				state("send") { //this:State
					action { //it:State
						println("FRIDGE SENDING")
						forward("fridgeMsg", "fridgeMsg(LISTA)" ,"smartphone" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
